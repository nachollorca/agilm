from dataclasses import asdict, dataclass
from typing import Optional

@dataclass
class Base:
    """
    Base class providing utility methods for converting to and from dictionaries.
    """
    @property
    def to_dict(self) -> dict:
        return asdict(self)

    @classmethod
    def from_dict(cls, data: dict):
        return cls(**data)
    
    def to_str(self) -> str:
        return ""
        

@dataclass
class Message(Base):
    """
    Represents a message in a conversation.

    Attributes:
        role (str): The role of the message sender (e.g., "user", "assistant").
        content (str): The content of the message.
    """
    role: str
    content: str

@dataclass
class Answer(Base):
    """
    Represents an answer generated by a language model.

    Attributes:
        content (str): The content of the answer.
        tokens_in (int): The number of input tokens used to generate the answer.
        tokens_out (int): The number of output tokens generated in the answer.
        time (float): The time taken to generate the answer in seconds.
    """
    content: str
    tokens_in: int
    tokens_out: int
    time: Optional[float] = None

    @property
    def message(self) -> Message:
        """
        Converts the answer to a Message object with the role "assistant".

        Returns:
            Message: A Message object representing the answer.
        """
        return Message("assistant", self.content)
    
@dataclass
class Action(Base):
    """
    Represents an tool request by a Language Model.

    Attributes:
        name (str): The name of the tool.
        params (dict): A dictionary with input parameters.
    """
    name: str
    params: dict

@dataclass
class Observation(Base):
    """
    Represents the result of an Action.

    Attributes:
        status (str): The status of the observation (e.g., "success", "failure").
        content (str): The content of the observation.
    """
    status: str
    content: str

@dataclass
class Model(Base):
    """
    Represents a language model.

    Attributes:
        provider (str): The provider of the language model (e.g., "OpenAI", "Anthropic").
        id (str): The unique identifier of the language model.
        locations (list[str]): A list of locations where the model is available.
    """
    provider: str
    id: str
    locations: Optional[list[str]] = None